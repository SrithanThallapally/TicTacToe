public class TicTacToe
{
   private int turn = 1;

    private String[][] board = new String[3][3];
    
    public TicTacToe(){
        board = new String[][] { {"-", "-", "-"}, 
            {"-", "-", "-"}, 
            {"-", "-", "-"}};
    
    }
    
    public String[][] getBoard(){
        return board;
    }
   
   
   //this method returns the current turn
   public int getTurn()
   {
       return turn;
   }
   
   /*This method prints out the board array on to the console
   */
   public void printBoard()
   {
       System.out.println("  0 1 2");
       
       for(int i = 0; i < board.length; i++){
           System.out.print(i + " ");
           for(int a = 0;a < board[i].length; a++){
                System.out.print(board[i][a] + " ");   
                
           }
           System.out.println("");
       }
       
   }
   
   //This method returns true if space row, col is a valid space
   public boolean pickLocation(int row, int col)
   {
       if(board[row][col] == "-"){
           return true;
       } else {
           return false;
       }
   }
   
   //This method places an X or O at location row, col based on the int turn
   public void takeTurn(int row, int col)
   {
       
       if(turn % 2 == 0 && pickLocation(row, col) == true){
           board[row][col] = "X";
	   turn++;
       } 
       
       if(turn % 2 == 1 && pickLocation(row, col) == true){
           board[row][col] = "O";
	   turn++
       }
       
   }
   
   //This method returns a boolean that returns true if a row has three X or O's in a row
   public boolean checkRow()
   {
       boolean isAllThree = false;
       for (int i = 0; i < board.length; i++){
           int counterX = 0;
           int counterO = 0;
           
           for(int a = 0; a < board[i].length; a++){
               if(board[i][a] == "X"){
                   counterX++;
               }
               if(board[i][a] == "O"){
                   counterO++;
               }
               
           }
          
          if(counterO == 3 || counterX == 3){
             isAllThree = true; 
          }
          
          if (isAllThree == true){
              
              return isAllThree;
          }
          
       }
       return isAllThree;
       
   }
   
    //This method returns a boolean that returns true if a col has three X or O's
   public boolean checkCol()
   {
       boolean isAllThree = false;
       for (int i = 0; i < board[0].length; i++){
           int counterX = 0;
           int counterO = 0;
           
           for(int a = 0; a < board.length; a++){
               if(board[a][i] == "X"){
                   counterX++;
               }
               if(board[a][i] == "O"){
                   counterO++;
               }
               
           }
          
          if(counterO == 3 || counterX == 3){
             isAllThree = true; 
          }
          
          if (isAllThree == true){
              
              return isAllThree;
          }
          
       }
       return isAllThree;
   }
   
    //This method returns a boolean that returns true if either diagonal has three X or O's
   public boolean checkDiag()
   {
      boolean isAllThree = false;
      
      if(board[0][0] == "X" && board[1][1] == "X" && board[2][2] == "X"){
          isAllThree = true;
      }
      if(board[0][0] == "0" && board[1][1] == "0" && board[2][2] == "0"){
          isAllThree = true;
      }
      if(board[0][2] == "X" && board[1][1] == "X" && board[2][0] == "X"){
          isAllThree = true;
      }
      if(board[0][2] == "0" && board[1][1] == "0" && board[2][0] == "0"){
          isAllThree = true;
      }
      return isAllThree;
   }
   
   //This method returns a boolean that checks if someone has won the game
   public boolean checkWin()
   {
       boolean win = false;
       win = checkDiag() || checkCol() || checkRow();
       //if(checkDiag() || checkCol() || checkRow()) win == true;
       
       return win;
       
   }

}